

# This file was *autogenerated* from the file ./lab05.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_0p5 = RealNumber('0.5'); _sage_const_4 = Integer(4); _sage_const_27 = Integer(27); _sage_const_100070000190133 = Integer(100070000190133)
from enum import Enum


class PorD(Enum):
    POINT = "Point"
    DIVISOR = "Divisor"


def Multiplier(a, N, P, Q):
    if Q == [_sage_const_0 , _sage_const_1 , _sage_const_0 ]:
        return PorD.POINT, P
    if P == [_sage_const_0 , _sage_const_1 , _sage_const_0 ]:
        return PorD.POINT, Q

    x1, y1, _, x2, y2, _ = P + Q
    if (x1, y1) == (x2, -y2):
        return PorD.POINT, [_sage_const_0 , _sage_const_1 , _sage_const_0 ]

    d = gcd(x1 - x2, N)
    if d not in (_sage_const_1 , N):
        print(f"Step 2: {d = }")
        return PorD.DIVISOR, d

    if x1 == x2:
        d = gcd(y1 + y2, N)
        if d > _sage_const_1 :
            print(f"Step 3: {d = }")
            return PorD.DIVISOR, d
        al = Mod((_sage_const_3  * pow(x1, _sage_const_2 ) + a) / (y1 + y2), N)
    else:
        al = Mod((y2 - y1) / (x2 - x1), N)
    bet = Mod(y1 - al * x1, N)
    x3 = Mod(pow(al, _sage_const_2 ) - x1 - x2, N)
    y3 = Mod(-(al * x3 + bet), N)
    return PorD.POINT, [x3, y3, _sage_const_1 ]


def Multiplication(a, N, P, k):
    k_bits = list(map(int, bin(k)[_sage_const_2 :]))
    Q = [_sage_const_0 , _sage_const_1 , _sage_const_0 ]
    for bit in k_bits:
        pord, Q = Multiplier(a, N, Q, Q)
        if pord == PorD.DIVISOR:
            return pord, Q
        if bit == _sage_const_1 :
            pord, Q = Multiplier(a, N, Q, P)
            if pord == PorD.DIVISOR:
                return pord, Q
    return PorD.POINT, Q


def factorECM(N):
    """
    TESTS::
      sage: factorECM(100070000190133)
      [10007, 10000000019]
      sage: factorECM(100181800505809010267)
      [5009090003, 20000000089]
      sage: factorECM(6986389896254914969335451)
      [833489857, 8382093480298843]
    """
    b1 = ceil(exp((_sage_const_1  / sqrt(_sage_const_2 )) * log(N) ** _sage_const_0p5  * log(log(N)) ** _sage_const_0p5 ))
    print(f"{b1 = }")

    while True:
        a = Integers(N).random_element()
        x = Integers(N).random_element()
        y = Integers(N).random_element()
        b = Mod(y ** _sage_const_2  - x ** _sage_const_3  - a * x, N)
        g = gcd(Mod(_sage_const_4  * a ** _sage_const_3  + _sage_const_27  * b ** _sage_const_2 , N), N)
        if g == N:
            continue
        if g != _sage_const_1 :
            return sorted([int(g), N // int(g)])

        P = [x, y, _sage_const_1 ]
        for p in Primes():
            if p > b1:
                break
            e = _sage_const_1 
            pe = p
            while pe < b1:
                pord, P = Multiplication(a, N, P, pe)
                if pord == PorD.DIVISOR:
                    return sorted([int(P), N // int(P)])
                e += _sage_const_1 
                pe = pow(p, e)


print(factorECM(_sage_const_100070000190133 ))

