(async () => {
    try {
        const accounts = await web3.eth.getAccounts();
		// CHANGE: address of deployed verifier contract
        const address = "0xd8b934580fcE35a11B58C6D73aDeE468a2833fa8";
        const abi = [{
			"inputs": [
				{
					"components": [
						{
							"components": [
								{
									"internalType": "uint256",
									"name": "X",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Y",
									"type": "uint256"
								}
							],
							"internalType": "struct Pairing.G1Point",
							"name": "a",
							"type": "tuple"
						},
						{
							"components": [
								{
									"internalType": "uint256[2]",
									"name": "X",
									"type": "uint256[2]"
								},
								{
									"internalType": "uint256[2]",
									"name": "Y",
									"type": "uint256[2]"
								}
							],
							"internalType": "struct Pairing.G2Point",
							"name": "b",
							"type": "tuple"
						},
						{
							"components": [
								{
									"internalType": "uint256",
									"name": "X",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "Y",
									"type": "uint256"
								}
							],
							"internalType": "struct Pairing.G1Point",
							"name": "c",
							"type": "tuple"
						}
					],
					"internalType": "struct Verifier.Proof",
					"name": "proof",
					"type": "tuple"
				},
				{
					"internalType": "uint256[2]",
					"name": "input",
					"type": "uint256[2]"
				}
			],
			"name": "verifyTx",
			"outputs": [
				{
					"internalType": "bool",
					"name": "r",
					"type": "bool"
				}
			],
			"stateMutability": "view",
			"type": "function"
		}];

        const verifier = new web3.eth.Contract(abi, address, {from: accounts[0], gasPrice: '20000000000000'});

		// CHANGE: content of proof.js generated by ZoKrates
        const proof = {
            "scheme": "g16",
            "curve": "bn128",
            "proof": {
                "a": [
                "0x0e503fe5aa8ebf8d99c32bcb1a56aad63af1a09b416c507af6287e4a3a67b432",
                "0x061fb6f74289edac2a9823d9ac9f0418d20cc1295515fdb43b3dd754b707b459"
                ],
                "b": [
                [
                    "0x2b64a703b1d63fd5af0aeb31c29e9722d4a42e523d86b3ab268f914def775f61",
                    "0x0a5222ebbb3cc72ab069a1d63d0bcd2d4f22be2b6fd9e9c0291eb7d8bc079109"
                ],
                [
                    "0x23ce0fc4a1568bc93e250d1e8a501619076b847a21dfb12b3a63c8b852364656",
                    "0x2d1f518df342cc78e9bf92103f89584037d7fb6e10ecebb9279b1751b2ee2450"
                ]
                ],
                "c": [
                "0x00a6e29ca96fbcd6ab39aaf2d13e1ea6d694c4f35279d13f9a9ced9b2111f3da",
                "0x098b4f8d58352d84800c12b640c5a1ba70aaebc4a9840ed10ba47e20f97f51ec"
                ]
            },
            "inputs": [
                "0x000000000000000000000000000000000000000000000000000000000000000d",
                "0x0000000000000000000000000000000000000000000000000000000000000200"
            ]
        }

        const result = await verifier.methods.verifyTx(proof.proof, proof.inputs).call({ from: accounts[0] });
        console.log(result);

    } catch (e) {
        console.log("" + e);
    }
})();